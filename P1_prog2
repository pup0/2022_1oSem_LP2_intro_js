1) Analise o trecho de código e as proposições a seguir. I. Erro na linha 1. II. Erro na linha 2. III. Executa e mostra 2. É correto apenas o que se afirma em:

1. const variavel = 1
2. variavel++
3. console.log(variavel)
Resp. II

2) Analise o trecho de código e marque as duas proposições verdadeiras:

1. console.log(nome)
2. const idade = 18
3. if (idade >= 18) {
4.   var nome = 'João'
5.   console.log(nome + ' é maior de idade')
6.   }
7.   console.log(nome)

Resp. Exibe undefined João é maior de idade João
      Caso a palavra var seja trocada por let, na linha 4, o programa passa a se comportar de maneira diferente.

3) Considere o seguinte trecho de código e marque as duas proposições verdadeiras:

1. const n1 = 5
2. let n2 = '10'
3. var n3 = n1 + n2
4. var n4 = n1 + number(n2)
5. console.log(n1, n2, n3, n4)

Resp. Todas as atribuições são válidas.
      A linha 3 faz uso de coerção implícita.
      
4) Considere o trecho de código e as proposições a seguir. I. A função reduce é uma função de alta ordem. II. O resultado exibido é a soma de todos os elementos 
contidos na coleção valores. III. O resultado exibido depende da paridade dos elementos contidos na coleção valores. É correto apenas o que se afirma em:

1. const valores = [1, 2, 3, 4, 5]
2.
3. const res = valores.reduce((ac, v) => {
4.   return v % 2 ==1 ? ac + v : ac
5. )}
6. console.log(res)

Resp. I e III

5) Analise o trecho de código e marque a opção correta:

1. const soma = (a, b) => {a, b};
2. console.log(soma(2, 3));

Resp. Exibe undefined.

6) Analise o trecho de código e marque a opção correta:

1. function f1(){
2.   console.log('f1');
3.   }
4. function f2 (f){
5.   console.log('f2');
6.   f();
7.   }
8. function f3 (f){
9.   f()
10.   console.log('f3');
11.   return function(){
12.     console.log('f4');
13.  }
14.   }
15.  f2(f1)
16.  f3(f1)()

Resp. Exibe f2 f1 f1 f3 f4

7) Considere o trecho de código e as proposições a seguir. OBS: Suponha que um arquivo chamado arquivo.txt existe, pode ser acessado sem erros e seu conteúdo 
é 2. I. O código faz uso de arrow functions e, portanto, não apresenta o conceito de "inferno de callbacks". II. Exibe 2 2. 
III. A função f1 é incondizente com o uso do pacote fs, já que a sua lista de parâmetros não admite o recebimento de um objeto que representa um erro.
É correto apenas o que se afirma em:

1. const fs = require('fs');
2. const f1 = (nome) => {
3.   const f2 = (erro, conteudo) => {
4.     if(!erro)
5.       console.log9(conteudo.toString())
6.     const f3 = erro, conteudo) => {
7.       if(!erro)
8.         console.log(conteudo.toString())
9.         }
10.      fs.readFile(nome, f3)
11.      }
12.    fs.readFile(nome, f2)
13.     }
14.
15. f1("arquivo.txt")

Resp. II

8) Considere o trecho de código e as proposições a seguir. I. A função sempre devolve uma promise no estado Fullfilled. 
II. O código cliente - aquele que usa a função - pode obter o texto "Tudo OK!" usando a construção then. 
III. A função const f = ( ) => Promise.resolve("Tudo OK!") é equivalente àquela exibida no trecho de código. É correto apenas o que se afirma em:

1. function minhaPromise (){
2.   return Promise.resolve("Tudo OK!")}

Resp. I, II e III

9) Analise o trecho de código e marque as duas opções corretas:

1. const f = async() => {
2.   return 1}
3. f()
4. .then(res => res)
5. .then(res => res + 2)
6. .then(res => res % 2 == 1)
7. .then(res => console.log(res))

Resp. Há quatro variáveis chamadas res. Elas possuem o mesmo nome e escopos distintos.
      Exibe true.
      
10) Analise o trecho de código e marque as duas opções corretas. (esta questão foi anulada pois a função teste não é chamada,
o que inviabiliza respondê-la corretamente):

1. async function f() {
2.   return 1;
3.   }
4.
5. async function teste() {
6.   const r = await f()
7.   console.log(r)
8.   f().then(res => console.log(res))
9.   r.then(res => console.log(res))
10.  }
  
  Resp. Erro na linha 2.
        Erro nas linhas 2 e 6.
        Exibe 1 1.
        Erro nas linhas 2 e 9.
        A função f devolve uma promise. 
  
